datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id    String  @id @default(cuid())
  name  String
  image String?

  membership    Membership[]
  emailAccounts EmailAccount[]
}

model Membership {
  id   String         @id @default(cuid())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model EmailAccount {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // Gmail
  gmailAccessToken              String?
  gmailRefreshToken             String?
  gmailExpiresAt                DateTime?
  gmailSyncedAt                 DateTime?
  gmailSyncedHistoryId          String?
  gmailSyncedHistoryIdUpdatedAt DateTime?

  // Outlook
  outlookAccessToken              String?
  outlookRefreshToken             String?
  outlookExpiresAt                DateTime?
  outlookSyncedAt                 DateTime?
  outlookSyncedHistoryId          String?
  outlookSyncedHistoryIdUpdatedAt DateTime?

  // Yahoo
  yahooAccessToken              String?
  yahooRefreshToken             String?
  yahooExpiresAt                DateTime?
  yahooSyncedAt                 DateTime?
  yahooSyncedHistoryId          String?
  yahooSyncedHistoryIdUpdatedAt DateTime?

  // IMAP
  imapHost     String?
  imapPort     Int?
  imapUsername String?
  imapPassword String?
  imapSyncedAt DateTime?

  // SMTP
  smtpHost     String?
  smtpPort     Int?
  smtpUsername String?
  smtpPassword String?
}

// Account, User, Session, and VerificationToken based on: https://authjs.dev/reference/adapter/prisma
model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @unique // `@unique` was added here. It's not part of the original schema. May remove this in the future
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// not in use. we only use jwt for sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role        GlobalRole   @default(CUSTOMER)
  memberships Membership[]

  // additional fields
  about                     String?
  watchEmailsExpirationDate DateTime?
  lastSyncedHistoryId       String?
  completedOnboarding       Boolean   @default(false)

  // settings
  aiModel             String?
  openAIApiKey        String?
  statsEmailFrequency Frequency @default(WEEKLY)
  categorizeEmails    Boolean   @default(true)

  // lemon squeezy
  lemonSqueezyCustomerId     Int?
  lemonSqueezySubscriptionId String?
  lemonSqueezyRenewsAt       DateTime?

  // unsubscribe credits
  // if `unsubscribeMonth` not set to this month, set to current month
  // reset `unsubscribeCredits` each time month is changed
  unsubscribeMonth   Int? // 1-12
  unsubscribeCredits Int?

  promptHistory PromptHistory[]
  labels        Label[]
  rules         Rule[]
  executedRules ExecutedRule[]
  newsletters   Newsletter[]

  summaries     Summary[]
  actionItems   ActionItem[]
  categories    Category[]
  urgencyLevels UrgencyLevel[]
}

model Summary {
  id        String   @id @default(cuid())
  threadId  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  summary   String

  @@unique([threadId])
}

model ActionItem {
  id        String   @id @default(cuid())
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  completed Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId])
}

model Category {
  id        String   @id @default(cuid())
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId])
}

model UrgencyLevel {
  id        String   @id @default(cuid())
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Level
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId])
}

model WaitlistUser {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  invited    Boolean  @default(false)
  inviteCode String?  @unique
}

// not in use as it's only used for passwordless login
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PromptHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Label {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gmailLabelId String
  name         String
  description  String? // used in prompts
  enabled      Boolean  @default(true)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gmailLabelId, userId])
  @@unique([name, userId])
}

model Rule {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  instructions  String
  actions       Action[]
  automate      Boolean        @default(true) // if set to false we display the plan and ask the user to confirm
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  executedRules ExecutedRule[]

  @@unique([name, userId])
}

model Action {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  type      ActionType
  ruleId    String
  rule      Rule       @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  // optional extra fields to be used with the action
  label   String?
  subject String?
  content String?
  to      String?
  cc      String?
  bcc     String?
}

model ExecutedRule {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  threadId  String
  messageId String
  actions   ActionType[]
  data      Json?
  automated Boolean

  // may be null if the rule was deleted
  ruleId String?
  rule   Rule?   @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  // storing user here in case rule was deleted
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  email     String
  status    NewsletterStatus?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, userId])
}

enum ActionType {
  ARCHIVE
  LABEL
  REPLY
  SEND_EMAIL
  FORWARD
  DRAFT_EMAIL
  SUMMARIZE
  MARK_SPAM
  // SNOOZE
  // ADD_TO_DO
  // CALL_WEBHOOK
  // INTEGRATION // for example, add to Notion
}

enum Level {
  LOW
  MEDIUM
  HIGH
}

enum Frequency {
  NEVER
  // DAILY
  WEEKLY
  // MONTHLY
  // YEARLY
}

enum NewsletterStatus {
  APPROVED
  UNSUBSCRIBED
  AUTO_ARCHIVED
}
